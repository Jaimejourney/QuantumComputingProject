//------------------------------------------------------------------------------
// <auto-generated>                                                             
//     This code was generated by a tool.                                       
//     Changes to this file may cause incorrect behavior and will be lost if    
//     the code is regenerated.                                                 
// </auto-generated>                                                            
//------------------------------------------------------------------------------
#pragma warning disable 162
#pragma warning disable 1591
using System;
using Microsoft.Quantum.Core;
using Microsoft.Quantum.Intrinsic;
using Microsoft.Quantum.Simulation.Core;

[assembly: CallableDeclaration("{\"Kind\":{\"Case\":\"Operation\"},\"QualifiedName\":{\"Namespace\":\"Quantum.Week1\",\"Name\":\"CFC_Pre_Reference\"},\"Attributes\":[],\"Modifiers\":{\"Access\":{\"Case\":\"DefaultAccess\"}},\"SourceFile\":\"/Users/yikaizhu/Downloads/Compressed/CounterFeitCoinAlgorithm/CounterfeitCoinAlgorithm.qs\",\"Position\":{\"Item1\":12,\"Item2\":4},\"SymbolRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":28}},\"ArgumentTuple\":{\"Case\":\"QsTuple\",\"Fields\":[[{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"query\"]},\"Type\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":30},\"Item2\":{\"Line\":1,\"Column\":35}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"answer\"]},\"Type\":{\"Case\":\"Qubit\"},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":46},\"Item2\":{\"Line\":1,\"Column\":52}}}]}]]},\"Signature\":{\"TypeParameters\":[],\"ArgumentType\":{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},{\"Case\":\"Qubit\"}]]},\"ReturnType\":{\"Case\":\"UnitType\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsBody\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"Quantum.Week1\",\"Name\":\"CFC_Pre_Reference\"},\"Attributes\":[],\"SourceFile\":\"/Users/yikaizhu/Downloads/Compressed/CounterFeitCoinAlgorithm/CounterfeitCoinAlgorithm.qs\",\"Position\":{\"Item1\":12,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":28}},\"Documentation\":[]}")]
[assembly: CallableDeclaration("{\"Kind\":{\"Case\":\"Operation\"},\"QualifiedName\":{\"Namespace\":\"Quantum.Week1\",\"Name\":\"CFC_StatePrep_Reference\"},\"Attributes\":[],\"Modifiers\":{\"Access\":{\"Case\":\"DefaultAccess\"}},\"SourceFile\":\"/Users/yikaizhu/Downloads/Compressed/CounterFeitCoinAlgorithm/CounterfeitCoinAlgorithm.qs\",\"Position\":{\"Item1\":23,\"Item2\":4},\"SymbolRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":34}},\"ArgumentTuple\":{\"Case\":\"QsTuple\",\"Fields\":[[{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"query\"]},\"Type\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":36},\"Item2\":{\"Line\":1,\"Column\":41}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"answer\"]},\"Type\":{\"Case\":\"Qubit\"},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":53},\"Item2\":{\"Line\":1,\"Column\":59}}}]}]]},\"Signature\":{\"TypeParameters\":[],\"ArgumentType\":{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},{\"Case\":\"Qubit\"}]]},\"ReturnType\":{\"Case\":\"UnitType\"},\"Information\":{\"Characteristics\":{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsBody\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"Quantum.Week1\",\"Name\":\"CFC_StatePrep_Reference\"},\"Attributes\":[],\"SourceFile\":\"/Users/yikaizhu/Downloads/Compressed/CounterFeitCoinAlgorithm/CounterfeitCoinAlgorithm.qs\",\"Position\":{\"Item1\":23,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":34}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsAdjoint\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"Quantum.Week1\",\"Name\":\"CFC_StatePrep_Reference\"},\"Attributes\":[],\"SourceFile\":\"/Users/yikaizhu/Downloads/Compressed/CounterFeitCoinAlgorithm/CounterfeitCoinAlgorithm.qs\",\"Position\":{\"Item1\":23,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":2,\"Column\":8},\"Item2\":{\"Line\":2,\"Column\":11}},\"Documentation\":[\"automatically generated QsAdjoint specialization for Quantum.Week1.CFC_StatePrep_Reference\"]}")]
[assembly: CallableDeclaration("{\"Kind\":{\"Case\":\"Operation\"},\"QualifiedName\":{\"Namespace\":\"Quantum.Week1\",\"Name\":\"CFC_UF\"},\"Attributes\":[],\"Modifiers\":{\"Access\":{\"Case\":\"DefaultAccess\"}},\"SourceFile\":\"/Users/yikaizhu/Downloads/Compressed/CounterFeitCoinAlgorithm/CounterfeitCoinAlgorithm.qs\",\"Position\":{\"Item1\":31,\"Item2\":4},\"SymbolRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":17}},\"ArgumentTuple\":{\"Case\":\"QsTuple\",\"Fields\":[[{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"x\"]},\"Type\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":18},\"Item2\":{\"Line\":1,\"Column\":19}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"Coins\"]},\"Type\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Int\"}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":31},\"Item2\":{\"Line\":1,\"Column\":36}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"y\"]},\"Type\":{\"Case\":\"Qubit\"},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":44},\"Item2\":{\"Line\":1,\"Column\":45}}}]}]]},\"Signature\":{\"TypeParameters\":[],\"ArgumentType\":{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Int\"}]},{\"Case\":\"Qubit\"}]]},\"ReturnType\":{\"Case\":\"UnitType\"},\"Information\":{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsBody\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"Quantum.Week1\",\"Name\":\"CFC_UF\"},\"Attributes\":[],\"SourceFile\":\"/Users/yikaizhu/Downloads/Compressed/CounterFeitCoinAlgorithm/CounterfeitCoinAlgorithm.qs\",\"Position\":{\"Item1\":31,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":17}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsAdjoint\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"Quantum.Week1\",\"Name\":\"CFC_UF\"},\"Attributes\":[],\"SourceFile\":\"/Users/yikaizhu/Downloads/Compressed/CounterFeitCoinAlgorithm/CounterfeitCoinAlgorithm.qs\",\"Position\":{\"Item1\":31,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":65},\"Item2\":{\"Line\":1,\"Column\":72}},\"Documentation\":[\"automatically generated QsAdjoint specialization for Quantum.Week1.CFC_UF\"]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsControlled\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"Quantum.Week1\",\"Name\":\"CFC_UF\"},\"Attributes\":[],\"SourceFile\":\"/Users/yikaizhu/Downloads/Compressed/CounterFeitCoinAlgorithm/CounterfeitCoinAlgorithm.qs\",\"Position\":{\"Item1\":31,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":65},\"Item2\":{\"Line\":1,\"Column\":72}},\"Documentation\":[\"automatically generated QsControlled specialization for Quantum.Week1.CFC_UF\"]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsControlledAdjoint\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"Quantum.Week1\",\"Name\":\"CFC_UF\"},\"Attributes\":[],\"SourceFile\":\"/Users/yikaizhu/Downloads/Compressed/CounterFeitCoinAlgorithm/CounterfeitCoinAlgorithm.qs\",\"Position\":{\"Item1\":31,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":65},\"Item2\":{\"Line\":1,\"Column\":72}},\"Documentation\":[\"automatically generated QsControlledAdjoint specialization for Quantum.Week1.CFC_UF\"]}")]
[assembly: CallableDeclaration("{\"Kind\":{\"Case\":\"Operation\"},\"QualifiedName\":{\"Namespace\":\"Quantum.Week1\",\"Name\":\"B_oracle\"},\"Attributes\":[],\"Modifiers\":{\"Access\":{\"Case\":\"DefaultAccess\"}},\"SourceFile\":\"/Users/yikaizhu/Downloads/Compressed/CounterFeitCoinAlgorithm/CounterfeitCoinAlgorithm.qs\",\"Position\":{\"Item1\":40,\"Item2\":4},\"SymbolRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":19}},\"ArgumentTuple\":{\"Case\":\"QsTuple\",\"Fields\":[[{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"query\"]},\"Type\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Int\"}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":20},\"Item2\":{\"Line\":1,\"Column\":25}}}]}]]},\"Signature\":{\"TypeParameters\":[],\"ArgumentType\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Int\"}]},\"ReturnType\":{\"Case\":\"Bool\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsBody\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"Quantum.Week1\",\"Name\":\"B_oracle\"},\"Attributes\":[],\"SourceFile\":\"/Users/yikaizhu/Downloads/Compressed/CounterFeitCoinAlgorithm/CounterfeitCoinAlgorithm.qs\",\"Position\":{\"Item1\":40,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":19}},\"Documentation\":[]}")]
[assembly: CallableDeclaration("{\"Kind\":{\"Case\":\"Operation\"},\"QualifiedName\":{\"Namespace\":\"Quantum.Week1\",\"Name\":\"CounterFeitCoinGame\"},\"Attributes\":[],\"Modifiers\":{\"Access\":{\"Case\":\"DefaultAccess\"}},\"SourceFile\":\"/Users/yikaizhu/Downloads/Compressed/CounterFeitCoinAlgorithm/CounterfeitCoinAlgorithm.qs\",\"Position\":{\"Item1\":62,\"Item2\":4},\"SymbolRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":30}},\"ArgumentTuple\":{\"Case\":\"QsTuple\",\"Fields\":[[{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"Coins\"]},\"Type\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Int\"}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":31},\"Item2\":{\"Line\":1,\"Column\":36}}}]}]]},\"Signature\":{\"TypeParameters\":[],\"ArgumentType\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Int\"}]},\"ReturnType\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Int\"}]},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsBody\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"Quantum.Week1\",\"Name\":\"CounterFeitCoinGame\"},\"Attributes\":[],\"SourceFile\":\"/Users/yikaizhu/Downloads/Compressed/CounterFeitCoinAlgorithm/CounterfeitCoinAlgorithm.qs\",\"Position\":{\"Item1\":62,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":30}},\"Documentation\":[]}")]
[assembly: CallableDeclaration("{\"Kind\":{\"Case\":\"Operation\"},\"QualifiedName\":{\"Namespace\":\"Quantum.Week1\",\"Name\":\"isContained\"},\"Attributes\":[],\"Modifiers\":{\"Access\":{\"Case\":\"DefaultAccess\"}},\"SourceFile\":\"/Users/yikaizhu/Downloads/Compressed/CounterFeitCoinAlgorithm/CounterfeitCoinAlgorithm.qs\",\"Position\":{\"Item1\":147,\"Item2\":4},\"SymbolRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":22}},\"ArgumentTuple\":{\"Case\":\"QsTuple\",\"Fields\":[[{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"numbers\"]},\"Type\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Int\"}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":23},\"Item2\":{\"Line\":1,\"Column\":30}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"index\"]},\"Type\":{\"Case\":\"Int\"},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":38},\"Item2\":{\"Line\":1,\"Column\":43}}}]}]]},\"Signature\":{\"TypeParameters\":[],\"ArgumentType\":{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Int\"}]},{\"Case\":\"Int\"}]]},\"ReturnType\":{\"Case\":\"Bool\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsBody\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"Quantum.Week1\",\"Name\":\"isContained\"},\"Attributes\":[],\"SourceFile\":\"/Users/yikaizhu/Downloads/Compressed/CounterFeitCoinAlgorithm/CounterfeitCoinAlgorithm.qs\",\"Position\":{\"Item1\":147,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":22}},\"Documentation\":[]}")]
[assembly: CallableDeclaration("{\"Kind\":{\"Case\":\"Operation\"},\"QualifiedName\":{\"Namespace\":\"Quantum.Week1\",\"Name\":\"CounterfeitCoin_Main\"},\"Attributes\":[],\"Modifiers\":{\"Access\":{\"Case\":\"DefaultAccess\"}},\"SourceFile\":\"/Users/yikaizhu/Downloads/Compressed/CounterFeitCoinAlgorithm/CounterfeitCoinAlgorithm.qs\",\"Position\":{\"Item1\":157,\"Item2\":4},\"SymbolRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":31}},\"ArgumentTuple\":{\"Case\":\"QsTuple\",\"Fields\":[[]]},\"Signature\":{\"TypeParameters\":[],\"ArgumentType\":{\"Case\":\"UnitType\"},\"ReturnType\":{\"Case\":\"UnitType\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsBody\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"Quantum.Week1\",\"Name\":\"CounterfeitCoin_Main\"},\"Attributes\":[],\"SourceFile\":\"/Users/yikaizhu/Downloads/Compressed/CounterFeitCoinAlgorithm/CounterfeitCoinAlgorithm.qs\",\"Position\":{\"Item1\":157,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":31}},\"Documentation\":[]}")]
#line hidden
namespace Quantum.Week1
{
    [SourceLocation("/Users/yikaizhu/Downloads/Compressed/CounterFeitCoinAlgorithm/CounterfeitCoinAlgorithm.qs", OperationFunctor.Body, 13, 24)]
    public partial class CFC_Pre_Reference : Operation<(IQArray<Qubit>,Qubit), QVoid>, ICallable
    {
        public CFC_Pre_Reference(IOperationFactory m) : base(m)
        {
        }

        public class In : QTuple<(IQArray<Qubit>,Qubit)>, IApplyData
        {
            public In((IQArray<Qubit>,Qubit) data) : base(data)
            {
            }

            System.Collections.Generic.IEnumerable<Qubit> IApplyData.Qubits
            {
                get
                {
                    return Qubit.Concat(((IApplyData)Data.Item1)?.Qubits, ((IApplyData)Data.Item2)?.Qubits);
                }
            }
        }

        String ICallable.Name => "CFC_Pre_Reference";
        String ICallable.FullName => "Quantum.Week1.CFC_Pre_Reference";
        public static OperationInfo<(IQArray<Qubit>,Qubit), QVoid> Info => new OperationInfo<(IQArray<Qubit>,Qubit), QVoid>(typeof(CFC_Pre_Reference));
        protected ICallable Length
        {
            get;
            set;
        }

        protected ICallable MicrosoftQuantumCanonApplyToEach
        {
            get;
            set;
        }

        protected IUnitary<Qubit> MicrosoftQuantumIntrinsicH
        {
            get;
            set;
        }

        protected IUnitary<(Qubit,Qubit)> MicrosoftQuantumIntrinsicCNOT
        {
            get;
            set;
        }

        public override Func<(IQArray<Qubit>,Qubit), QVoid> Body => (__in__) =>
        {
            var (query,answer) = __in__;
#line 14 "/Users/yikaizhu/Downloads/Compressed/CounterFeitCoinAlgorithm/CounterfeitCoinAlgorithm.qs"
            var n = query.Length;
#line 15 "/Users/yikaizhu/Downloads/Compressed/CounterFeitCoinAlgorithm/CounterfeitCoinAlgorithm.qs"
            MicrosoftQuantumCanonApplyToEach.Apply((MicrosoftQuantumIntrinsicH, query));
#line 16 "/Users/yikaizhu/Downloads/Compressed/CounterFeitCoinAlgorithm/CounterfeitCoinAlgorithm.qs"
            foreach (var i in new QRange(0L, (n - 1L)))
#line hidden
            {
#line 17 "/Users/yikaizhu/Downloads/Compressed/CounterFeitCoinAlgorithm/CounterfeitCoinAlgorithm.qs"
                MicrosoftQuantumIntrinsicCNOT.Apply((query[i], answer));
            }

#line hidden
            return QVoid.Instance;
        }

        ;
        public override void Init()
        {
            this.Length = this.Factory.Get<ICallable>(typeof(Microsoft.Quantum.Core.Length<>));
            this.MicrosoftQuantumCanonApplyToEach = this.Factory.Get<ICallable>(typeof(Microsoft.Quantum.Canon.ApplyToEach<>));
            this.MicrosoftQuantumIntrinsicH = this.Factory.Get<IUnitary<Qubit>>(typeof(Microsoft.Quantum.Intrinsic.H));
            this.MicrosoftQuantumIntrinsicCNOT = this.Factory.Get<IUnitary<(Qubit,Qubit)>>(typeof(Microsoft.Quantum.Intrinsic.CNOT));
        }

        public override IApplyData __dataIn((IQArray<Qubit>,Qubit) data) => new In(data);
        public override IApplyData __dataOut(QVoid data) => data;
        public static System.Threading.Tasks.Task<QVoid> Run(IOperationFactory __m__, IQArray<Qubit> query, Qubit answer)
        {
            return __m__.Run<CFC_Pre_Reference, (IQArray<Qubit>,Qubit), QVoid>((query, answer));
        }
    }

    [SourceLocation("/Users/yikaizhu/Downloads/Compressed/CounterFeitCoinAlgorithm/CounterfeitCoinAlgorithm.qs", OperationFunctor.Body, 24, 32)]
    [SourceLocation("/Users/yikaizhu/Downloads/Compressed/CounterFeitCoinAlgorithm/CounterfeitCoinAlgorithm.qs", OperationFunctor.Adjoint, 24, 32)]
    public partial class CFC_StatePrep_Reference : Adjointable<(IQArray<Qubit>,Qubit)>, ICallable
    {
        public CFC_StatePrep_Reference(IOperationFactory m) : base(m)
        {
        }

        public class In : QTuple<(IQArray<Qubit>,Qubit)>, IApplyData
        {
            public In((IQArray<Qubit>,Qubit) data) : base(data)
            {
            }

            System.Collections.Generic.IEnumerable<Qubit> IApplyData.Qubits
            {
                get
                {
                    return Qubit.Concat(((IApplyData)Data.Item1)?.Qubits, ((IApplyData)Data.Item2)?.Qubits);
                }
            }
        }

        String ICallable.Name => "CFC_StatePrep_Reference";
        String ICallable.FullName => "Quantum.Week1.CFC_StatePrep_Reference";
        public static OperationInfo<(IQArray<Qubit>,Qubit), QVoid> Info => new OperationInfo<(IQArray<Qubit>,Qubit), QVoid>(typeof(CFC_StatePrep_Reference));
        protected IUnitary<Qubit> MicrosoftQuantumIntrinsicX
        {
            get;
            set;
        }

        protected IUnitary<Qubit> MicrosoftQuantumIntrinsicH
        {
            get;
            set;
        }

        public override Func<(IQArray<Qubit>,Qubit), QVoid> Body => (__in__) =>
        {
            var (query,answer) = __in__;
#line 26 "/Users/yikaizhu/Downloads/Compressed/CounterFeitCoinAlgorithm/CounterfeitCoinAlgorithm.qs"
            MicrosoftQuantumIntrinsicX.Apply(answer);
#line 28 "/Users/yikaizhu/Downloads/Compressed/CounterFeitCoinAlgorithm/CounterfeitCoinAlgorithm.qs"
            MicrosoftQuantumIntrinsicH.Apply(answer);
#line hidden
            return QVoid.Instance;
        }

        ;
        public override Func<(IQArray<Qubit>,Qubit), QVoid> AdjointBody => (__in__) =>
        {
            var (query,answer) = __in__;
#line 24 "/Users/yikaizhu/Downloads/Compressed/CounterFeitCoinAlgorithm/CounterfeitCoinAlgorithm.qs"
            MicrosoftQuantumIntrinsicH.Adjoint.Apply(answer);
#line 24 "/Users/yikaizhu/Downloads/Compressed/CounterFeitCoinAlgorithm/CounterfeitCoinAlgorithm.qs"
            MicrosoftQuantumIntrinsicX.Adjoint.Apply(answer);
#line hidden
            return QVoid.Instance;
        }

        ;
        public override void Init()
        {
            this.MicrosoftQuantumIntrinsicX = this.Factory.Get<IUnitary<Qubit>>(typeof(Microsoft.Quantum.Intrinsic.X));
            this.MicrosoftQuantumIntrinsicH = this.Factory.Get<IUnitary<Qubit>>(typeof(Microsoft.Quantum.Intrinsic.H));
        }

        public override IApplyData __dataIn((IQArray<Qubit>,Qubit) data) => new In(data);
        public override IApplyData __dataOut(QVoid data) => data;
        public static System.Threading.Tasks.Task<QVoid> Run(IOperationFactory __m__, IQArray<Qubit> query, Qubit answer)
        {
            return __m__.Run<CFC_StatePrep_Reference, (IQArray<Qubit>,Qubit), QVoid>((query, answer));
        }
    }

    [SourceLocation("/Users/yikaizhu/Downloads/Compressed/CounterFeitCoinAlgorithm/CounterfeitCoinAlgorithm.qs", OperationFunctor.Body, 32, 41)]
    [SourceLocation("/Users/yikaizhu/Downloads/Compressed/CounterFeitCoinAlgorithm/CounterfeitCoinAlgorithm.qs", OperationFunctor.Adjoint, 32, 41)]
    [SourceLocation("/Users/yikaizhu/Downloads/Compressed/CounterFeitCoinAlgorithm/CounterfeitCoinAlgorithm.qs", OperationFunctor.Controlled, 32, 41)]
    [SourceLocation("/Users/yikaizhu/Downloads/Compressed/CounterFeitCoinAlgorithm/CounterfeitCoinAlgorithm.qs", OperationFunctor.ControlledAdjoint, 32, 41)]
    public partial class CFC_UF : Unitary<(IQArray<Qubit>,IQArray<Int64>,Qubit)>, ICallable
    {
        public CFC_UF(IOperationFactory m) : base(m)
        {
        }

        public class In : QTuple<(IQArray<Qubit>,IQArray<Int64>,Qubit)>, IApplyData
        {
            public In((IQArray<Qubit>,IQArray<Int64>,Qubit) data) : base(data)
            {
            }

            System.Collections.Generic.IEnumerable<Qubit> IApplyData.Qubits
            {
                get
                {
                    return Qubit.Concat(((IApplyData)Data.Item1)?.Qubits, ((IApplyData)Data.Item3)?.Qubits);
                }
            }
        }

        String ICallable.Name => "CFC_UF";
        String ICallable.FullName => "Quantum.Week1.CFC_UF";
        public static OperationInfo<(IQArray<Qubit>,IQArray<Int64>,Qubit), QVoid> Info => new OperationInfo<(IQArray<Qubit>,IQArray<Int64>,Qubit), QVoid>(typeof(CFC_UF));
        protected ICallable Length
        {
            get;
            set;
        }

        protected IUnitary<(Qubit,Qubit)> MicrosoftQuantumIntrinsicCNOT
        {
            get;
            set;
        }

        protected ICallable<QRange, QRange> RangeReverse
        {
            get;
            set;
        }

        public override Func<(IQArray<Qubit>,IQArray<Int64>,Qubit), QVoid> Body => (__in__) =>
        {
            var (x,Coins,y) = __in__;
#line 34 "/Users/yikaizhu/Downloads/Compressed/CounterFeitCoinAlgorithm/CounterfeitCoinAlgorithm.qs"
            foreach (var i in new QRange(0L, (Coins.Length - 1L)))
#line hidden
            {
#line 35 "/Users/yikaizhu/Downloads/Compressed/CounterFeitCoinAlgorithm/CounterfeitCoinAlgorithm.qs"
                if ((Coins[i] == 1L))
                {
#line 36 "/Users/yikaizhu/Downloads/Compressed/CounterFeitCoinAlgorithm/CounterfeitCoinAlgorithm.qs"
                    MicrosoftQuantumIntrinsicCNOT.Apply((x[i], y));
                }
            }

#line hidden
            return QVoid.Instance;
        }

        ;
        public override Func<(IQArray<Qubit>,IQArray<Int64>,Qubit), QVoid> AdjointBody => (__in__) =>
        {
            var (x,Coins,y) = __in__;
#line 32 "/Users/yikaizhu/Downloads/Compressed/CounterFeitCoinAlgorithm/CounterfeitCoinAlgorithm.qs"
            foreach (var __qsVar0__i__ in RangeReverse.Apply(new QRange(0L, (Coins.Length - 1L))))
#line hidden
            {
#line 32 "/Users/yikaizhu/Downloads/Compressed/CounterFeitCoinAlgorithm/CounterfeitCoinAlgorithm.qs"
                if ((Coins[__qsVar0__i__] == 1L))
                {
#line 32 "/Users/yikaizhu/Downloads/Compressed/CounterFeitCoinAlgorithm/CounterfeitCoinAlgorithm.qs"
                    MicrosoftQuantumIntrinsicCNOT.Adjoint.Apply((x[__qsVar0__i__], y));
                }
            }

#line hidden
            return QVoid.Instance;
        }

        ;
        public override Func<(IQArray<Qubit>,(IQArray<Qubit>,IQArray<Int64>,Qubit)), QVoid> ControlledBody => (__in__) =>
        {
            var (__controlQubits__,(x,Coins,y)) = __in__;
#line 32 "/Users/yikaizhu/Downloads/Compressed/CounterFeitCoinAlgorithm/CounterfeitCoinAlgorithm.qs"
            foreach (var i in new QRange(0L, (Coins.Length - 1L)))
#line hidden
            {
#line 32 "/Users/yikaizhu/Downloads/Compressed/CounterFeitCoinAlgorithm/CounterfeitCoinAlgorithm.qs"
                if ((Coins[i] == 1L))
                {
#line 32 "/Users/yikaizhu/Downloads/Compressed/CounterFeitCoinAlgorithm/CounterfeitCoinAlgorithm.qs"
                    MicrosoftQuantumIntrinsicCNOT.Controlled.Apply((__controlQubits__, (x[i], y)));
                }
            }

#line hidden
            return QVoid.Instance;
        }

        ;
        public override Func<(IQArray<Qubit>,(IQArray<Qubit>,IQArray<Int64>,Qubit)), QVoid> ControlledAdjointBody => (__in__) =>
        {
            var (__controlQubits__,(x,Coins,y)) = __in__;
#line 32 "/Users/yikaizhu/Downloads/Compressed/CounterFeitCoinAlgorithm/CounterfeitCoinAlgorithm.qs"
            foreach (var __qsVar0__i__ in RangeReverse.Apply(new QRange(0L, (Coins.Length - 1L))))
#line hidden
            {
#line 32 "/Users/yikaizhu/Downloads/Compressed/CounterFeitCoinAlgorithm/CounterfeitCoinAlgorithm.qs"
                if ((Coins[__qsVar0__i__] == 1L))
                {
#line 32 "/Users/yikaizhu/Downloads/Compressed/CounterFeitCoinAlgorithm/CounterfeitCoinAlgorithm.qs"
                    MicrosoftQuantumIntrinsicCNOT.Adjoint.Controlled.Apply((__controlQubits__, (x[__qsVar0__i__], y)));
                }
            }

#line hidden
            return QVoid.Instance;
        }

        ;
        public override void Init()
        {
            this.Length = this.Factory.Get<ICallable>(typeof(Microsoft.Quantum.Core.Length<>));
            this.MicrosoftQuantumIntrinsicCNOT = this.Factory.Get<IUnitary<(Qubit,Qubit)>>(typeof(Microsoft.Quantum.Intrinsic.CNOT));
            this.RangeReverse = this.Factory.Get<ICallable<QRange, QRange>>(typeof(Microsoft.Quantum.Core.RangeReverse));
        }

        public override IApplyData __dataIn((IQArray<Qubit>,IQArray<Int64>,Qubit) data) => new In(data);
        public override IApplyData __dataOut(QVoid data) => data;
        public static System.Threading.Tasks.Task<QVoid> Run(IOperationFactory __m__, IQArray<Qubit> x, IQArray<Int64> Coins, Qubit y)
        {
            return __m__.Run<CFC_UF, (IQArray<Qubit>,IQArray<Int64>,Qubit), QVoid>((x, Coins, y));
        }
    }

    [SourceLocation("/Users/yikaizhu/Downloads/Compressed/CounterFeitCoinAlgorithm/CounterfeitCoinAlgorithm.qs", OperationFunctor.Body, 41, 63)]
    public partial class B_oracle : Operation<IQArray<Int64>, Boolean>, ICallable
    {
        public B_oracle(IOperationFactory m) : base(m)
        {
        }

        String ICallable.Name => "B_oracle";
        String ICallable.FullName => "Quantum.Week1.B_oracle";
        public static OperationInfo<IQArray<Int64>, Boolean> Info => new OperationInfo<IQArray<Int64>, Boolean>(typeof(B_oracle));
        protected Allocate Allocate
        {
            get;
            set;
        }

        protected Release Release
        {
            get;
            set;
        }

        protected ICallable Length
        {
            get;
            set;
        }

        protected ICallable MicrosoftQuantumCanonApplyToEach
        {
            get;
            set;
        }

        protected IUnitary<Qubit> MicrosoftQuantumIntrinsicX
        {
            get;
            set;
        }

        protected IUnitary<Qubit> MicrosoftQuantumIntrinsicZ
        {
            get;
            set;
        }

        protected ICallable<Qubit, Result> MicrosoftQuantumIntrinsicM
        {
            get;
            set;
        }

        protected ICallable<IQArray<Qubit>, QVoid> MicrosoftQuantumIntrinsicResetAll
        {
            get;
            set;
        }

        public override Func<IQArray<Int64>, Boolean> Body => (__in__) =>
        {
            var query = __in__;
#line hidden
            {
#line 42 "/Users/yikaizhu/Downloads/Compressed/CounterFeitCoinAlgorithm/CounterfeitCoinAlgorithm.qs"
                var qs = Allocate.Apply(query.Length);
#line hidden
                bool __arg1__ = true;
                try
                {
#line 43 "/Users/yikaizhu/Downloads/Compressed/CounterFeitCoinAlgorithm/CounterfeitCoinAlgorithm.qs"
                    var result = 0L;
#line 44 "/Users/yikaizhu/Downloads/Compressed/CounterFeitCoinAlgorithm/CounterfeitCoinAlgorithm.qs"
                    MicrosoftQuantumCanonApplyToEach.Apply((MicrosoftQuantumIntrinsicX, qs));
#line 45 "/Users/yikaizhu/Downloads/Compressed/CounterFeitCoinAlgorithm/CounterfeitCoinAlgorithm.qs"
                    foreach (var i in new QRange(0L, 2L, (qs.Length - 1L)))
#line hidden
                    {
#line 46 "/Users/yikaizhu/Downloads/Compressed/CounterFeitCoinAlgorithm/CounterfeitCoinAlgorithm.qs"
                        MicrosoftQuantumIntrinsicZ.Apply(qs[i]);
                    }

#line 49 "/Users/yikaizhu/Downloads/Compressed/CounterFeitCoinAlgorithm/CounterfeitCoinAlgorithm.qs"
                    foreach (var i in new QRange(0L, (qs.Length - 1L)))
#line hidden
                    {
#line 50 "/Users/yikaizhu/Downloads/Compressed/CounterFeitCoinAlgorithm/CounterfeitCoinAlgorithm.qs"
                        if ((MicrosoftQuantumIntrinsicM.Apply(qs[i]) == Result.One))
                        {
#line 51 "/Users/yikaizhu/Downloads/Compressed/CounterFeitCoinAlgorithm/CounterfeitCoinAlgorithm.qs"
                            result = (result + (query[i] * 1L));
                        }
                        else
                        {
#line 53 "/Users/yikaizhu/Downloads/Compressed/CounterFeitCoinAlgorithm/CounterfeitCoinAlgorithm.qs"
                            result = (result + (query[i] * -(1L)));
                        }
                    }

#line 57 "/Users/yikaizhu/Downloads/Compressed/CounterFeitCoinAlgorithm/CounterfeitCoinAlgorithm.qs"
                    MicrosoftQuantumIntrinsicResetAll.Apply(qs);
#line 58 "/Users/yikaizhu/Downloads/Compressed/CounterFeitCoinAlgorithm/CounterfeitCoinAlgorithm.qs"
                    return (result == 0L);
                }
#line hidden
                catch
                {
                    __arg1__ = false;
                    throw;
                }
#line hidden
                finally
                {
                    if (__arg1__)
                    {
#line hidden
                        Release.Apply(qs);
                    }
                }
            }
        }

        ;
        public override void Init()
        {
            this.Allocate = this.Factory.Get<Allocate>(typeof(Microsoft.Quantum.Intrinsic.Allocate));
            this.Release = this.Factory.Get<Release>(typeof(Microsoft.Quantum.Intrinsic.Release));
            this.Length = this.Factory.Get<ICallable>(typeof(Microsoft.Quantum.Core.Length<>));
            this.MicrosoftQuantumCanonApplyToEach = this.Factory.Get<ICallable>(typeof(Microsoft.Quantum.Canon.ApplyToEach<>));
            this.MicrosoftQuantumIntrinsicX = this.Factory.Get<IUnitary<Qubit>>(typeof(Microsoft.Quantum.Intrinsic.X));
            this.MicrosoftQuantumIntrinsicZ = this.Factory.Get<IUnitary<Qubit>>(typeof(Microsoft.Quantum.Intrinsic.Z));
            this.MicrosoftQuantumIntrinsicM = this.Factory.Get<ICallable<Qubit, Result>>(typeof(Microsoft.Quantum.Intrinsic.M));
            this.MicrosoftQuantumIntrinsicResetAll = this.Factory.Get<ICallable<IQArray<Qubit>, QVoid>>(typeof(Microsoft.Quantum.Intrinsic.ResetAll));
        }

        public override IApplyData __dataIn(IQArray<Int64> data) => data;
        public override IApplyData __dataOut(Boolean data) => new QTuple<Boolean>(data);
        public static System.Threading.Tasks.Task<Boolean> Run(IOperationFactory __m__, IQArray<Int64> query)
        {
            return __m__.Run<B_oracle, IQArray<Int64>, Boolean>(query);
        }
    }

    [SourceLocation("/Users/yikaizhu/Downloads/Compressed/CounterFeitCoinAlgorithm/CounterfeitCoinAlgorithm.qs", OperationFunctor.Body, 63, 148)]
    public partial class CounterFeitCoinGame : Operation<IQArray<Int64>, IQArray<Int64>>, ICallable
    {
        public CounterFeitCoinGame(IOperationFactory m) : base(m)
        {
        }

        String ICallable.Name => "CounterFeitCoinGame";
        String ICallable.FullName => "Quantum.Week1.CounterFeitCoinGame";
        public static OperationInfo<IQArray<Int64>, IQArray<Int64>> Info => new OperationInfo<IQArray<Int64>, IQArray<Int64>>(typeof(CounterFeitCoinGame));
        protected Allocate Allocate
        {
            get;
            set;
        }

        protected Release Release
        {
            get;
            set;
        }

        protected ICallable Length
        {
            get;
            set;
        }

        protected ICallable<(IQArray<Qubit>,Qubit), QVoid> CFC_Pre_Reference
        {
            get;
            set;
        }

        protected ICallable<Qubit, Result> MicrosoftQuantumIntrinsicM
        {
            get;
            set;
        }

        protected ICallable MicrosoftQuantumCanonApplyToEach
        {
            get;
            set;
        }

        protected IUnitary<Qubit> MicrosoftQuantumIntrinsicH
        {
            get;
            set;
        }

        protected ICallable<String, QVoid> MicrosoftQuantumIntrinsicMessage
        {
            get;
            set;
        }

        protected IAdjointable<(IQArray<Qubit>,Qubit)> CFC_StatePrep_Reference
        {
            get;
            set;
        }

        protected IUnitary<(IQArray<Qubit>,IQArray<Int64>,Qubit)> CFC_UF
        {
            get;
            set;
        }

        protected ICallable<IQArray<Qubit>, IQArray<Result>> MicrosoftQuantumMeasurementMultiM
        {
            get;
            set;
        }

        protected ICallable<IQArray<Result>, IQArray<Boolean>> MicrosoftQuantumConvertResultArrayAsBoolArray
        {
            get;
            set;
        }

        protected ICallable<(IQArray<Int64>,Int64), Boolean> isContained
        {
            get;
            set;
        }

        protected ICallable<Qubit, QVoid> MicrosoftQuantumIntrinsicReset
        {
            get;
            set;
        }

        protected ICallable<IQArray<Qubit>, QVoid> MicrosoftQuantumIntrinsicResetAll
        {
            get;
            set;
        }

        public override Func<IQArray<Int64>, IQArray<Int64>> Body => (__in__) =>
        {
            var Coins = __in__;
#line hidden
            {
#line 64 "/Users/yikaizhu/Downloads/Compressed/CounterFeitCoinAlgorithm/CounterfeitCoinAlgorithm.qs"
                var (register,output) = (Allocate.Apply(Coins.Length), Allocate.Apply());
#line hidden
                bool __arg1__ = true;
                try
                {
#line 65 "/Users/yikaizhu/Downloads/Compressed/CounterFeitCoinAlgorithm/CounterfeitCoinAlgorithm.qs"
                    var correct = false;
#line 67 "/Users/yikaizhu/Downloads/Compressed/CounterFeitCoinAlgorithm/CounterfeitCoinAlgorithm.qs"
                    while (true)
                    {
#line 68 "/Users/yikaizhu/Downloads/Compressed/CounterFeitCoinAlgorithm/CounterfeitCoinAlgorithm.qs"
                        CFC_Pre_Reference.Apply((register, output));
#line 69 "/Users/yikaizhu/Downloads/Compressed/CounterFeitCoinAlgorithm/CounterfeitCoinAlgorithm.qs"
                        var res = MicrosoftQuantumIntrinsicM.Apply(output);
#line 71 "/Users/yikaizhu/Downloads/Compressed/CounterFeitCoinAlgorithm/CounterfeitCoinAlgorithm.qs"
                        if ((res == Result.Zero))
                        {
#line 72 "/Users/yikaizhu/Downloads/Compressed/CounterFeitCoinAlgorithm/CounterfeitCoinAlgorithm.qs"
                            correct = true;
                        }
                        else
                        {
#line 74 "/Users/yikaizhu/Downloads/Compressed/CounterFeitCoinAlgorithm/CounterfeitCoinAlgorithm.qs"
                            MicrosoftQuantumCanonApplyToEach.Apply((MicrosoftQuantumIntrinsicH, register));
                        }

                        if (correct)
                        {
                            break;
                        }
                        else
                        {
                        }
                    }

#line 78 "/Users/yikaizhu/Downloads/Compressed/CounterFeitCoinAlgorithm/CounterfeitCoinAlgorithm.qs"
                    MicrosoftQuantumIntrinsicMessage.Apply("out");
#line 79 "/Users/yikaizhu/Downloads/Compressed/CounterFeitCoinAlgorithm/CounterfeitCoinAlgorithm.qs"
                    CFC_StatePrep_Reference.Apply((register, output));
#line 82 "/Users/yikaizhu/Downloads/Compressed/CounterFeitCoinAlgorithm/CounterfeitCoinAlgorithm.qs"
                    CFC_UF.Apply((register, Coins, output));
#line 85 "/Users/yikaizhu/Downloads/Compressed/CounterFeitCoinAlgorithm/CounterfeitCoinAlgorithm.qs"
                    MicrosoftQuantumCanonApplyToEach.Apply((MicrosoftQuantumIntrinsicH, register));
#line 87 "/Users/yikaizhu/Downloads/Compressed/CounterFeitCoinAlgorithm/CounterfeitCoinAlgorithm.qs"
                    var answer = QArray<Boolean>.Create(Coins.Length);
#line 90 "/Users/yikaizhu/Downloads/Compressed/CounterFeitCoinAlgorithm/CounterfeitCoinAlgorithm.qs"
                    var tmp = (IQArray<Result>)MicrosoftQuantumMeasurementMultiM.Apply(register);
#line 91 "/Users/yikaizhu/Downloads/Compressed/CounterFeitCoinAlgorithm/CounterfeitCoinAlgorithm.qs"
                    var numberOfFakeCoins = 0L;
#line 92 "/Users/yikaizhu/Downloads/Compressed/CounterFeitCoinAlgorithm/CounterfeitCoinAlgorithm.qs"
                    answer = new QArray<Boolean>(MicrosoftQuantumConvertResultArrayAsBoolArray.Apply(tmp));
#line 93 "/Users/yikaizhu/Downloads/Compressed/CounterFeitCoinAlgorithm/CounterfeitCoinAlgorithm.qs"
                    foreach (var i in new QRange(0L, (answer.Length - 1L)))
#line hidden
                    {
#line 94 "/Users/yikaizhu/Downloads/Compressed/CounterFeitCoinAlgorithm/CounterfeitCoinAlgorithm.qs"
                        if (answer[i])
                        {
#line 95 "/Users/yikaizhu/Downloads/Compressed/CounterFeitCoinAlgorithm/CounterfeitCoinAlgorithm.qs"
                            numberOfFakeCoins = (numberOfFakeCoins + 1L);
                        }
                    }

#line 100 "/Users/yikaizhu/Downloads/Compressed/CounterFeitCoinAlgorithm/CounterfeitCoinAlgorithm.qs"
                    var result = QArray<Int64>.Create(numberOfFakeCoins);
#line 101 "/Users/yikaizhu/Downloads/Compressed/CounterFeitCoinAlgorithm/CounterfeitCoinAlgorithm.qs"
                    var num = 0L;
#line 102 "/Users/yikaizhu/Downloads/Compressed/CounterFeitCoinAlgorithm/CounterfeitCoinAlgorithm.qs"
                    foreach (var i in new QRange(0L, (answer.Length - 1L)))
#line hidden
                    {
#line 103 "/Users/yikaizhu/Downloads/Compressed/CounterFeitCoinAlgorithm/CounterfeitCoinAlgorithm.qs"
                        if (answer[i])
                        {
#line 104 "/Users/yikaizhu/Downloads/Compressed/CounterFeitCoinAlgorithm/CounterfeitCoinAlgorithm.qs"
                            result.Modify(num, i);
#line 105 "/Users/yikaizhu/Downloads/Compressed/CounterFeitCoinAlgorithm/CounterfeitCoinAlgorithm.qs"
                            num = (num + 1L);
                        }
                    }

#line 110 "/Users/yikaizhu/Downloads/Compressed/CounterFeitCoinAlgorithm/CounterfeitCoinAlgorithm.qs"
                    var newResult = QArray<Int64>.Create((Coins.Length - numberOfFakeCoins));
#line 111 "/Users/yikaizhu/Downloads/Compressed/CounterFeitCoinAlgorithm/CounterfeitCoinAlgorithm.qs"
                    var num2 = 0L;
#line 112 "/Users/yikaizhu/Downloads/Compressed/CounterFeitCoinAlgorithm/CounterfeitCoinAlgorithm.qs"
                    if ((Coins[result[0L]] == 0L))
                    {
#line 113 "/Users/yikaizhu/Downloads/Compressed/CounterFeitCoinAlgorithm/CounterfeitCoinAlgorithm.qs"
                        foreach (var i in new QRange(0L, (Coins.Length - 1L)))
#line hidden
                        {
#line 114 "/Users/yikaizhu/Downloads/Compressed/CounterFeitCoinAlgorithm/CounterfeitCoinAlgorithm.qs"
                            if (!(isContained.Apply((result?.Copy(), i))))
                            {
#line 115 "/Users/yikaizhu/Downloads/Compressed/CounterFeitCoinAlgorithm/CounterfeitCoinAlgorithm.qs"
                                newResult.Modify(num2, i);
#line 116 "/Users/yikaizhu/Downloads/Compressed/CounterFeitCoinAlgorithm/CounterfeitCoinAlgorithm.qs"
                                num2 = (num2 + 1L);
                            }
                        }

#line 119 "/Users/yikaizhu/Downloads/Compressed/CounterFeitCoinAlgorithm/CounterfeitCoinAlgorithm.qs"
                        result = QArray<Int64>.Create((Coins.Length - numberOfFakeCoins));
#line 120 "/Users/yikaizhu/Downloads/Compressed/CounterFeitCoinAlgorithm/CounterfeitCoinAlgorithm.qs"
                        foreach (var j in new QRange(0L, (result.Length - 1L)))
#line hidden
                        {
#line 121 "/Users/yikaizhu/Downloads/Compressed/CounterFeitCoinAlgorithm/CounterfeitCoinAlgorithm.qs"
                            result.Modify(j, newResult[j]);
                        }
                    }

#line 135 "/Users/yikaizhu/Downloads/Compressed/CounterFeitCoinAlgorithm/CounterfeitCoinAlgorithm.qs"
                    MicrosoftQuantumIntrinsicReset.Apply(output);
#line 136 "/Users/yikaizhu/Downloads/Compressed/CounterFeitCoinAlgorithm/CounterfeitCoinAlgorithm.qs"
                    MicrosoftQuantumIntrinsicResetAll.Apply(register);
#line 143 "/Users/yikaizhu/Downloads/Compressed/CounterFeitCoinAlgorithm/CounterfeitCoinAlgorithm.qs"
                    return result;
                }
#line hidden
                catch
                {
                    __arg1__ = false;
                    throw;
                }
#line hidden
                finally
                {
                    if (__arg1__)
                    {
#line hidden
                        Release.Apply(register);
#line hidden
                        Release.Apply(output);
                    }
                }
            }
        }

        ;
        public override void Init()
        {
            this.Allocate = this.Factory.Get<Allocate>(typeof(Microsoft.Quantum.Intrinsic.Allocate));
            this.Release = this.Factory.Get<Release>(typeof(Microsoft.Quantum.Intrinsic.Release));
            this.Length = this.Factory.Get<ICallable>(typeof(Microsoft.Quantum.Core.Length<>));
            this.CFC_Pre_Reference = this.Factory.Get<ICallable<(IQArray<Qubit>,Qubit), QVoid>>(typeof(CFC_Pre_Reference));
            this.MicrosoftQuantumIntrinsicM = this.Factory.Get<ICallable<Qubit, Result>>(typeof(Microsoft.Quantum.Intrinsic.M));
            this.MicrosoftQuantumCanonApplyToEach = this.Factory.Get<ICallable>(typeof(Microsoft.Quantum.Canon.ApplyToEach<>));
            this.MicrosoftQuantumIntrinsicH = this.Factory.Get<IUnitary<Qubit>>(typeof(Microsoft.Quantum.Intrinsic.H));
            this.MicrosoftQuantumIntrinsicMessage = this.Factory.Get<ICallable<String, QVoid>>(typeof(Microsoft.Quantum.Intrinsic.Message));
            this.CFC_StatePrep_Reference = this.Factory.Get<IAdjointable<(IQArray<Qubit>,Qubit)>>(typeof(CFC_StatePrep_Reference));
            this.CFC_UF = this.Factory.Get<IUnitary<(IQArray<Qubit>,IQArray<Int64>,Qubit)>>(typeof(CFC_UF));
            this.MicrosoftQuantumMeasurementMultiM = this.Factory.Get<ICallable<IQArray<Qubit>, IQArray<Result>>>(typeof(Microsoft.Quantum.Measurement.MultiM));
            this.MicrosoftQuantumConvertResultArrayAsBoolArray = this.Factory.Get<ICallable<IQArray<Result>, IQArray<Boolean>>>(typeof(Microsoft.Quantum.Convert.ResultArrayAsBoolArray));
            this.isContained = this.Factory.Get<ICallable<(IQArray<Int64>,Int64), Boolean>>(typeof(isContained));
            this.MicrosoftQuantumIntrinsicReset = this.Factory.Get<ICallable<Qubit, QVoid>>(typeof(Microsoft.Quantum.Intrinsic.Reset));
            this.MicrosoftQuantumIntrinsicResetAll = this.Factory.Get<ICallable<IQArray<Qubit>, QVoid>>(typeof(Microsoft.Quantum.Intrinsic.ResetAll));
        }

        public override IApplyData __dataIn(IQArray<Int64> data) => data;
        public override IApplyData __dataOut(IQArray<Int64> data) => data;
        public static System.Threading.Tasks.Task<IQArray<Int64>> Run(IOperationFactory __m__, IQArray<Int64> Coins)
        {
            return __m__.Run<CounterFeitCoinGame, IQArray<Int64>, IQArray<Int64>>(Coins);
        }
    }

    [SourceLocation("/Users/yikaizhu/Downloads/Compressed/CounterFeitCoinAlgorithm/CounterfeitCoinAlgorithm.qs", OperationFunctor.Body, 148, 158)]
    public partial class isContained : Operation<(IQArray<Int64>,Int64), Boolean>, ICallable
    {
        public isContained(IOperationFactory m) : base(m)
        {
        }

        public class In : QTuple<(IQArray<Int64>,Int64)>, IApplyData
        {
            public In((IQArray<Int64>,Int64) data) : base(data)
            {
            }

            System.Collections.Generic.IEnumerable<Qubit> IApplyData.Qubits => null;
        }

        String ICallable.Name => "isContained";
        String ICallable.FullName => "Quantum.Week1.isContained";
        public static OperationInfo<(IQArray<Int64>,Int64), Boolean> Info => new OperationInfo<(IQArray<Int64>,Int64), Boolean>(typeof(isContained));
        protected ICallable Length
        {
            get;
            set;
        }

        public override Func<(IQArray<Int64>,Int64), Boolean> Body => (__in__) =>
        {
            var (numbers,index) = __in__;
#line 149 "/Users/yikaizhu/Downloads/Compressed/CounterFeitCoinAlgorithm/CounterfeitCoinAlgorithm.qs"
            foreach (var i in new QRange(0L, (numbers.Length - 1L)))
#line hidden
            {
#line 150 "/Users/yikaizhu/Downloads/Compressed/CounterFeitCoinAlgorithm/CounterfeitCoinAlgorithm.qs"
                if ((numbers[i] == index))
                {
#line 151 "/Users/yikaizhu/Downloads/Compressed/CounterFeitCoinAlgorithm/CounterfeitCoinAlgorithm.qs"
                    return true;
                }
            }

#line 155 "/Users/yikaizhu/Downloads/Compressed/CounterFeitCoinAlgorithm/CounterfeitCoinAlgorithm.qs"
            return false;
        }

        ;
        public override void Init()
        {
            this.Length = this.Factory.Get<ICallable>(typeof(Microsoft.Quantum.Core.Length<>));
        }

        public override IApplyData __dataIn((IQArray<Int64>,Int64) data) => new In(data);
        public override IApplyData __dataOut(Boolean data) => new QTuple<Boolean>(data);
        public static System.Threading.Tasks.Task<Boolean> Run(IOperationFactory __m__, IQArray<Int64> numbers, Int64 index)
        {
            return __m__.Run<isContained, (IQArray<Int64>,Int64), Boolean>((numbers, index));
        }
    }

    [SourceLocation("/Users/yikaizhu/Downloads/Compressed/CounterFeitCoinAlgorithm/CounterfeitCoinAlgorithm.qs", OperationFunctor.Body, 158, -1)]
    public partial class CounterfeitCoin_Main : Operation<QVoid, QVoid>, ICallable
    {
        public CounterfeitCoin_Main(IOperationFactory m) : base(m)
        {
        }

        String ICallable.Name => "CounterfeitCoin_Main";
        String ICallable.FullName => "Quantum.Week1.CounterfeitCoin_Main";
        public static OperationInfo<QVoid, QVoid> Info => new OperationInfo<QVoid, QVoid>(typeof(CounterfeitCoin_Main));
        protected ICallable<IQArray<Int64>, IQArray<Int64>> CounterFeitCoinGame
        {
            get;
            set;
        }

        protected ICallable<String, QVoid> MicrosoftQuantumIntrinsicMessage
        {
            get;
            set;
        }

        public override Func<QVoid, QVoid> Body => (__in__) =>
        {
#line 159 "/Users/yikaizhu/Downloads/Compressed/CounterFeitCoinAlgorithm/CounterfeitCoinAlgorithm.qs"
            var res = (IQArray<Int64>)CounterFeitCoinGame.Apply(new QArray<Int64>(0L, 0L, 0L, 1L, 0L, 1L, 1L, 0L, 0L, 0L));
#line 160 "/Users/yikaizhu/Downloads/Compressed/CounterFeitCoinAlgorithm/CounterfeitCoinAlgorithm.qs"
            MicrosoftQuantumIntrinsicMessage.Apply(String.Format("{0}", res));
#line hidden
            return QVoid.Instance;
        }

        ;
        public override void Init()
        {
            this.CounterFeitCoinGame = this.Factory.Get<ICallable<IQArray<Int64>, IQArray<Int64>>>(typeof(CounterFeitCoinGame));
            this.MicrosoftQuantumIntrinsicMessage = this.Factory.Get<ICallable<String, QVoid>>(typeof(Microsoft.Quantum.Intrinsic.Message));
        }

        public override IApplyData __dataIn(QVoid data) => data;
        public override IApplyData __dataOut(QVoid data) => data;
        public static System.Threading.Tasks.Task<QVoid> Run(IOperationFactory __m__)
        {
            return __m__.Run<CounterfeitCoin_Main, QVoid, QVoid>(QVoid.Instance);
        }
    }
}